#+TITLE: where

* ~where~ concepts

A JSON object is turned into a [[http://www.postgresql.org/docs/devel/static/sql-select.html#SQL-WHERE][WHERE clause]]. 

#+HEADER: :engine postgresql :cmdline "--port 5433 --host localhost --user pongo pongo"
#+BEGIN_SRC sql 
  SELECT "where_to_sql"('
   {"_id" : ["test", 42],
    "foo" : "bar", 
    "baz" : 1234, 
    "bat" : {"$ne" : "xyzzy"},
    "$or" : {"baz" : "qwer", 
             "asdf" : true, 
             "$and" : {"foo" : null, "bar" : 42}}
   }'::json, 'AND',  null::test__id);
#+END_SRC


| where_to_sql                                                                                                                                        |
|-----------------------------------------------------------------------------------------------------------------------------------------------------|
| ((test = 'test' AND number = 42) AND foo = 'bar' AND baz = 1234 AND bat != 'xyzzy' AND (baz = 'qwer' OR asdf = true OR (foo IS NULL AND bar = 42))) |


* ~where~ Dictionary

** /Function/ ~where_to_sql~(object json, [...])~
# <<function where>>

#+name: pongo-function_where_to_sql
#+HEADER: :engine postgresql :cmdline "--port 5433 --host localhost --user pongo pongo"
#+BEGIN_SRC sql 
    --  \df "where_to_sql"
    --   DROP FUNCTION "where_to_sql"(json, text, variadic anyarray);
    --   DROP FUNCTION where_to_sql(json,text,anyelement);

      CREATE OR REPLACE FUNCTION "where_to_sql"
          ("object" json,
           "condition" text DEFAULT 'AND',
           "element" anyelement DEFAULT NULL::text)
      RETURNS text AS $$
      DECLARE 
        "where" text[] ;
        "text" text := '';

       -- * These are for the LOOP 
       "field" RECORD; 
 
      BEGIN
   
       IF ((json_typeof($1) = 'null')) THEN
        RETURN NULL;
       END IF;
     
  --      RAISE NOTICE '%', pg_typeof("object"); 
       FOR "field" IN (SELECT key, value
                       FROM json_each("object"))
        LOOP 
  
        CASE 
        -- smooth operators
         WHEN (substring("field".key FROM 1 FOR 1) = '$') THEN
          where := "where" ||  pongo."smooth_operator"("field".key, "field".value, "element", "object");
         WHEN (("field".key = '_id') 
               AND (pg_typeof("element")::text != 'text')) THEN
          where :=  "where" || 
              pongo."smooth_operator"('$and', pongo._id("element", "field".value), "element");
         ELSE 
          "text" := "field".key || ' ' ;
     
          CASE (json_typeof("field".value))
           WHEN 'object' THEN 
             "text" := "text" || pongo."smooth_operator"("field".value, "element");
           WHEN 'null' THEN
             "text" := "text" || 'IS NULL';
           ELSE 
             "text" := "text" || '= ' || pongo.to_sql("field".value) ;
          END CASE;
          "where" := "where" || "text";
       
        END CASE;
        END LOOP;

      RETURN (SELECT '(' || string_agg(unnest, ' '||"condition"||' ') || ')'
              FROM (SELECT UNNEST("where")) AS this);
      END;
      $$ LANGUAGE PLPGSQL;

#+END_SRC

#+RESULTS: pongo-function_where_to_sql
| CREATE FUNCTION |
|-----------------|


#+name: function_where
#+HEADER: :engine postgresql :cmdline "--html --host localhost --user pongo pongo"
#+HEADER: :results value html
#+BEGIN_SRC sql 


  CREATE OR REPLACE FUNCTION "where"
      (complex_query json,
       "condition" text DEFAULT 'AND',
       "element_name" text DEFAULT NULL,
       "_id" TEXT DEFAULT NULL)
  RETURNS text AS $$
  DECLARE 
    "where" text := 'true';

   -- * These are for the LOOP 
   "pair" RECORD; 
   
  BEGIN
  --  RAISE EXCEPTION 'c %', "condition";
    IF ("element_name" IS NOT NULL) THEN
     "element_name" := format('%I', "element_name");
    END IF;

    FOR "pair" IN (SELECT (json).key AS key, (json).value AS value 
                  FROM (SELECT json_each("complex_query") AS json) AS json)
    LOOP 
     IF (("pair".key)::text = '$or') 
      THEN "where" := concat("where", ' '||"condition"||' ', "where"("pair".value, 'OR'));
     ELSIF (("pair".key)::text = '$and') 
     THEN "where" := concat("where", ' '||"condition"||' ', "where"("pair".value, 'AND'));
       ELSIF (("pair".key)::text = '_type')
      THEN NULL;
     ELSIF (("pair".key)::text = '_id') 
     THEN "where" := concat("where", ' '||"condition"||' ',
                            "_id",
                            CASE json_typeof("pair".value)
                                WHEN 'object'  THEN ' ' ELSE ' = ' END
                             || "sql"("pair".value)   ||')');
     ELSE
     -- Now we can set the WHERE using "sql_value"
      "where" := concat("where", 
       -- First, the condition that we passed
       ' '||"condition"||' (' 
       -- If there is a name, add it and a dot
       ||  concat(("element_name"||'.'),
       -- Now the key as an SQL identifier or a smooth key
        CASE WHEN substring("pair".key FROM 1 FOR 10) = '{"$select"'
              THEN "select"((CAST ("pair".key AS json))->'$select')
             WHEN (("pair".key)::text = '_id')
              THEN '_id('||"element_name"
   
         ELSE format('%I', "pair".key)
        END
     
        -- and finally the value

        || CASE json_typeof("pair".value)
            WHEN 'object' THEN ' ' || "smooth_operator"("pair".value);
            WHEN 'null' THEN 'IS NULL'
            EH
                 ELSE ' = ' END
                 || "sql"("pair".value)   ||')'
              )
       );
    END IF;
    END LOOP;

    IF ("where" = 'true') THEN
      RETURN 'true';
    ELSE
      RETURN '('||COALESCE(substring("where" FROM '^true '||"condition"|| ' (.*)')||')', 
                          "where");
    END IF;



  END;
  $$ LANGUAGE PLPGSQL;


  CREATE OR REPLACE FUNCTION "where"
      (anyelement, 
       complex_query json,
       "condition" text DEFAULT 'AND',
       "element_name" text DEFAULT NULL,
       "_id" text DEFAULT NULL
       )
  RETURNS text AS $$
   SELECT "where"($2, $3,
                  COALESCE($4, pg_typeof($1)::text),
                  COALESCE($5, "_id"($1)));
  $$ LANGUAGE SQL;

  SELECT 'SELECT * FROM test WHERE' || "where"(null::test, json('{"number" : 1, "_id" : "bar", "_type" : "test"}'));

  select "_id"(null::test);
#+END_SRC

#+RESULTS:
#+BEGIN_HTML
<p>CREATE FUNCTION</p>
<p>CREATE FUNCTION</p>
#+END_HTML

** /Function/ ~where(complex_query json, [...])~
# <<function where>>

#+name: pongo-function_where-json
#+HEADER: :engine postgresql :cmdline "--port 5433 --host localhost --user pongo pongo"
#+HEADER: :results value html
#+BEGIN_SRC sql 


  CREATE OR REPLACE FUNCTION "where"
      (complex_query json,
       "condition" text DEFAULT 'AND',
       "element_name" text DEFAULT NULL, 
       "element" anyelement DEFAULT NULL::text)
  RETURNS text AS $$
  DECLARE 
    "where" text := 'true';

   -- * These are for the LOOP 
   "pair" RECORD; 
 
  BEGIN
  --  RAISE EXCEPTION 'c %', "condition";
    IF ("element_name" IS NOT NULL) THEN
     "element_name" := format('%I', "element_name");
    END IF;

    FOR "pair" IN (SELECT (json).key AS key, (json).value AS value 
                  FROM (SELECT json_each("complex_query") AS json) AS json)
    LOOP 
     -- The special $ operators
     IF (substring("pair".key FROM 1 FOR 1) = '$') THEN
       "where" := concat("where",' ', "condition",' (',
           pongo.to_sql(json_build_object("pair".key, "pair".value), "element_name"), ' )');
     -- The _id field
      ELSIF ("pair".key = '_id') THEN
       -- If there is an element, magic happens
          CASE 
           WHEN (pg_typeof("element")::text != 'text') THEN
             "where" := concat("where",' ', "condition",' ',
                "where"(_id("element", "pair".value), 'AND', $3, $4));
           WHEN ("element_name" IS NOT NULL) THEN
             "where" := concat("where",' ', "condition",' (',
             'CAST (pongo._id('||"element_name"||',*) AS text) ', 
             '= ', format('%L', CAST ("pair".value AS text)), ')') ;
           ELSE RAISE EXCEPTION '_id was given but no element or element name.';
          END CASE;
    
     ELSE
 
      -- Now we can set the WHERE using "sql_value"
      "where" := concat("where", 
       -- First, the condition that we passed
       ' '||"condition"||' (' 
       -- If there is a name, add it and a dot
       ||  concat(("element_name"||'.'),
       -- Now the key as an SQL identifier
       format('%I', "pair".key)
 
        -- and finally the value

        || concat(CASE json_typeof("pair".value)
                 WHEN 'object'  THEN ' ' 
                 WHEN 'null' THEN ' IS NULL ' 
                 ELSE ' = ' END, 
                 pongo."to_sql"("pair".value))   ||')'
              )
       );
     END IF;
    END LOOP;

    IF ("where" = 'true') THEN
      RETURN 'true';
    ELSE
      RETURN '('||COALESCE(substring("where" FROM '^true '||"condition"|| ' (.*)')||')', 
                          "where");
    END IF;



  END;
  $$ LANGUAGE PLPGSQL;
#+END_SRC

#+RESULTS: pongo-function_where-json
#+BEGIN_HTML
CREATE FUNCTION
#+END_HTML

#+name: function_where
#+HEADER: :engine postgresql :cmdline "--html --host localhost --user pongo pongo"
#+HEADER: :results value html
#+BEGIN_SRC sql 


  CREATE OR REPLACE FUNCTION "where"
      (complex_query json,
       "condition" text DEFAULT 'AND',
       "element_name" text DEFAULT NULL,
       "_id" TEXT DEFAULT NULL)
  RETURNS text AS $$
  DECLARE 
    "where" text := 'true';

   -- * These are for the LOOP 
   "pair" RECORD; 
   
  BEGIN
  --  RAISE EXCEPTION 'c %', "condition";
    IF ("element_name" IS NOT NULL) THEN
     "element_name" := format('%I', "element_name");
    END IF;

    FOR "pair" IN (SELECT (json).key AS key, (json).value AS value 
                  FROM (SELECT json_each("complex_query") AS json) AS json)
    LOOP 
     IF (("pair".key)::text = '$or') 
      THEN "where" := concat("where", ' '||"condition"||' ', "where"("pair".value, 'OR'));
     ELSIF (("pair".key)::text = '$and') 
      THEN "where" := concat("where", ' '||"condition"||' ', "where"("pair".value, 'AND'));
       ELSIF (("pair".key)::text = '_type')
      THEN NULL;
     ELSIF (("pair".key)::text = '_id') 
     THEN "where" := concat("where", ' '||"condition"||' ',
                            "_id",
                            CASE json_typeof("pair".value)
                                WHEN 'object'  THEN ' ' ELSE ' = ' END
                             || "sql"("pair".value)   ||')');
     ELSE
     -- Now we can set the WHERE using "sql_value"
      "where" := concat("where", 
       -- First, the condition that we passed
       ' '||"condition"||' (' 
       -- If there is a name, add it and a dot
       ||  concat(("element_name"||'.'),
       -- Now the key as an SQL identifier or a smooth key
        CASE WHEN substring("pair".key FROM 1 FOR 10) = '{"$select"'
              THEN "select"((CAST ("pair".key AS json))->'$select')
             WHEN (("pair".key)::text = '_id')
              THEN '_id('||"element_name"
   
         ELSE format('%I', "pair".key)
        END
     
        -- and finally the value

        || CASE json_typeof("pair".value)
                 WHEN 'object'  THEN ' ' ELSE ' = ' END
                 || "sql"("pair".value)   ||')'
              )
       );
    END IF;
    END LOOP;

    IF ("where" = 'true') THEN
      RETURN 'true';
    ELSE
      RETURN '('||COALESCE(substring("where" FROM '^true '||"condition"|| ' (.*)')||')', 
                          "where");
    END IF;



  END;
  $$ LANGUAGE PLPGSQL;


  CREATE OR REPLACE FUNCTION "where"
      (anyelement, 
       complex_query json,
       "condition" text DEFAULT 'AND',
       "element_name" text DEFAULT NULL,
       "_id" text DEFAULT NULL
       )
  RETURNS text AS $$
   SELECT "where"($2, $3,
                  COALESCE($4, pg_typeof($1)::text),
                  COALESCE($5, "_id"($1)));
  $$ LANGUAGE SQL;

  SELECT 'SELECT * FROM test WHERE' || "where"(null::test, json('{"number" : 1, "_id" : "bar", "_type" : "test"}'));

  select "_id"(null::test);
#+END_SRC

#+RESULTS:
#+BEGIN_HTML
<p>CREATE FUNCTION</p>
<p>CREATE FUNCTION</p>
#+END_HTML

* ~where~ Source File

#+BEGIN_SRC sql :noweb yes :padline no :tangle "../where.sql"
<<pongo-function_where_to_sql>>
#+END_SRC

